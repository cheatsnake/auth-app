{"version":3,"sources":["components/Spinner.tsx","components/Buttons.tsx","pages/ProfilePage.tsx","pages/LoginPage.tsx","pages/RegisterPage.tsx","App.tsx","axios/index.ts","services/AuthService.ts","store/store.ts","index.tsx"],"names":["Spinner","className","LoginButton","children","type","LinkButton","func","onClick","LogoutButton","observer","store","useContext","Context","value","user","email","readOnly","isActivated","toString","logout","useState","setEmail","password","setPassword","onSubmit","e","preventDefault","login","onLogin","onChange","target","maxLength","required","minLength","message","setViewForm","setMessage","checkPassword","setCheckPassword","register","onRegister","useEffect","localStorage","getItem","checkAuth","isAuth","hasOwnProperty","isLoading","viewForm","AUTH_URL","auth","axios","create","withCredentials","baseURL","interceptors","request","use","config","headers","Authorization","AuthService","post","Store","makeAutoObservable","this","bool","form","str","a","setLoading","response","setItem","data","accessToken","setAuth","setUser","removeItem","get","createContext","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.5c142dc4.chunk.js","sourcesContent":["import '../styles/Spinner.scss';\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"spinner\"></div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Spinner;","import { FC } from \"react\";\r\nimport '../styles/Buttons.scss';\r\n\r\nexport const LoginButton: FC = ({children}) => {\r\n    return (\r\n        <button type=\"submit\" className=\"btn btn_login\">{children}</button>\r\n    )\r\n}\r\n\r\nexport const RegisterButton: FC = ({children}) => {\r\n    return (\r\n        <button type=\"submit\" className=\"btn btn_register\">{children}</button>\r\n    )\r\n}\r\n\r\ninterface ILinkButton {\r\n    func: () => void;\r\n}\r\n\r\nexport const LinkButton: FC<ILinkButton> = ({children, func}) => {\r\n    return (\r\n        <button onClick={() => func()} className=\"btn btn_link\">{children}</button>\r\n    )\r\n}\r\n\r\ninterface ILogoutButton {\r\n    func: () => void;\r\n}\r\n\r\nexport const LogoutButton: FC<ILogoutButton> = ({children, func}) => {\r\n    return (\r\n        <button onClick={() => func()} className=\"btn btn_logout\">{children}</button>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { useContext } from \"react\";\r\nimport { Context } from \"..\";\r\nimport { LogoutButton } from \"../components/Buttons\";\r\nimport '../styles/Profile.scss';\r\n\r\nconst ProfilePage = () => {\r\n    const {store} = useContext(Context);\r\n    return (\r\n        <div className=\"profile\">\r\n            <h1>Welcome!</h1>\r\n            <label>Your email:</label>\r\n            <input type=\"text\" value={store.user.email} readOnly/>\r\n            <label>Email confirmed:</label>\r\n            <input type=\"text\" value={store.user.isActivated.toString()} readOnly/>\r\n            <LogoutButton func={() => store.logout()}>Logout</LogoutButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(ProfilePage);","import { observer } from \"mobx-react-lite\";\r\nimport { FC, useContext, useState } from \"react\";\r\nimport { Context } from \"..\";\r\nimport { LinkButton, LoginButton } from \"../components/Buttons\";\r\nimport '../styles/Forms.scss';\r\n\r\nconst LoginPage: FC = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const {store} = useContext(Context);\r\n\r\n    function onLogin(e: React.FormEvent<HTMLFormElement>): void {\r\n        e.preventDefault();\r\n        store.login(email, password);\r\n    }\r\n\r\n    function onForm() {\r\n        store.setViewForm('Register')\r\n        store.setMessage('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"label\">LOG IN</h1>\r\n            <form onSubmit={e => onLogin(e)} className=\"form\">\r\n                <label>Email</label>\r\n                <input \r\n                    onChange={e => setEmail(e.target.value)}\r\n                    value={email}\r\n                    type=\"email\"\r\n                    maxLength={25}\r\n                    required\r\n                />\r\n\r\n                <label>Password</label>\r\n                <input \r\n                    onChange={e => setPassword(e.target.value)}\r\n                    value={password}\r\n                    type=\"password\"\r\n                    minLength={6}\r\n                    maxLength={20}\r\n                    required\r\n                />\r\n                <div className=\"error\">{store.message ? store.message : null}</div>\r\n                <LoginButton>Login</LoginButton>\r\n                <LinkButton func={() => onForm()}>New user?</LinkButton>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(LoginPage); ","import { observer } from \"mobx-react-lite\";\r\nimport { FC, useContext, useState } from \"react\";\r\nimport { Context } from \"..\";\r\nimport { LinkButton, LoginButton } from \"../components/Buttons\";\r\nimport '../styles/Forms.scss';\r\n\r\nconst RegisterPage: FC = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [checkPassword, setCheckPassword] = useState<string>('');\r\n    const {store} = useContext(Context);\r\n\r\n    function onRegister(e: React.FormEvent<HTMLFormElement>): void {\r\n        e.preventDefault();\r\n        if (checkPassword !== password) {\r\n            setCheckPassword('');\r\n            store.setMessage('The entered passwords do not match');\r\n        } else {\r\n            store.register(email, password);\r\n        }\r\n    }\r\n\r\n    function onForm() {\r\n        store.setViewForm('Login')\r\n        store.setMessage('');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"label\">NEW USER</h1>\r\n            <form onSubmit={e => onRegister(e)} className=\"form\">\r\n                <label>Email</label>\r\n                <input \r\n                    onChange={e => setEmail(e.target.value)}\r\n                    value={email}\r\n                    type=\"email\"\r\n                    maxLength={25}\r\n                    required\r\n                />\r\n\r\n                <label>Password</label>\r\n                <input \r\n                    onChange={e => setPassword(e.target.value)}\r\n                    value={password}\r\n                    type=\"password\"\r\n                    minLength={6}\r\n                    maxLength={20}\r\n                    required\r\n                />\r\n\r\n                <label>Repeat password</label>\r\n                <input \r\n                    onChange={e => setCheckPassword(e.target.value)}\r\n                    value={checkPassword}\r\n                    type=\"password\"\r\n                    minLength={6}\r\n                    maxLength={20}\r\n                    required\r\n                />\r\n                <div className=\"error\">{store.message ? store.message : null}</div>\r\n                <LoginButton>Create</LoginButton>\r\n                <LinkButton func={() => onForm()}>Are you already registered?</LinkButton>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default observer(RegisterPage); ","import { observer } from 'mobx-react-lite';\nimport React, { useContext, useEffect } from 'react';\nimport Spinner from './components/Spinner';\nimport { Context } from './index';\nimport ProfilePage from './pages/ProfilePage';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\n\nconst App = () => {\n\n    const {store} = useContext(Context);\n    \n    useEffect(() => {\n        if (localStorage.getItem('token')) {\n            store.checkAuth();\n        }\n    }, [])\n\n    if (store.isAuth && store.user.hasOwnProperty('isActivated')) {\n        return (\n            <>\n                <ProfilePage/>\n            </>\n        )\n    }\n\n    return (\n        <div className=\"app\">\n            {store.isLoading ? <Spinner/> : null}\n            {store.viewForm === 'Login' ? <LoginPage/> : <RegisterPage/>}\n        </div>\n    );\n};\n\nexport default observer(App);","import axios from \"axios\";\r\n\r\nexport const AUTH_URL = 'https://auth-api-pro.herokuapp.com/auth';\r\n\r\nconst auth = axios.create({\r\n    withCredentials: true,\r\n    baseURL: AUTH_URL\r\n})\r\n\r\nauth.interceptors.request.use((config) => {\r\n    if (config.headers) {\r\n        config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`;\r\n        return config;\r\n    }\r\n})\r\n\r\nexport default auth;","import { AxiosResponse } from \"axios\";\r\nimport auth from \"../axios\";\r\nimport { AuthResponse } from \"../types/response/AuthResponse\";\r\n\r\nexport default class AuthService {\r\n    static async login(email: string, password: string): Promise<AxiosResponse<AuthResponse>> {\r\n        return auth.post<AuthResponse>('/login', {email, password})\r\n    }\r\n\r\n    static async register(email: string, password: string): Promise<AxiosResponse<AuthResponse>> {\r\n        return auth.post<AuthResponse>('/register', {email, password})\r\n    }\r\n\r\n    static async logout(): Promise<void> {\r\n        return auth.post('/logout')\r\n    }\r\n}","import axios from \"axios\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { AUTH_URL } from \"../axios\";\r\nimport AuthService from \"../services/AuthService\";\r\nimport { IUser } from \"../types/IUser\";\r\nimport { AuthResponse } from \"../types/response/AuthResponse\";\r\n\r\nexport default class Store {\r\n    user = {} as IUser;\r\n    isAuth = false;\r\n    viewForm = 'Login';\r\n    isLoading = false;\r\n    message = '';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    setAuth(bool: boolean) {\r\n        this.isAuth = bool;\r\n    }\r\n\r\n    setUser(user: IUser) {\r\n        this.user = user;\r\n    }\r\n\r\n    setLoading(bool: boolean) {\r\n        this.isLoading = bool;\r\n    }\r\n\r\n    setViewForm(form: 'Login' | 'Register') {\r\n        this.viewForm = form;\r\n    }\r\n\r\n    setMessage(str: string) {\r\n        this.message = str;\r\n    }\r\n\r\n    async login(email: string, password: string) {\r\n        this.setLoading(true);\r\n        try {\r\n            const response = await AuthService.login(email, password);\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e: any) {\r\n            this.setMessage(e.response?.data?.message);\r\n        } finally {\r\n            this.setLoading(false);\r\n            this.setMessage('');\r\n        }\r\n    }\r\n\r\n    async register(email: string, password: string) {\r\n        this.setLoading(true);\r\n        try {\r\n            const response = await AuthService.register(email, password);\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n            this.setViewForm('Login');\r\n        } catch (e: any) {\r\n            this.setMessage(e.response?.data?.message);\r\n        } finally {\r\n            this.setLoading(false);\r\n            this.setMessage('');\r\n        }\r\n    }\r\n\r\n    async logout() {\r\n        try {\r\n            await AuthService.logout();\r\n            localStorage.removeItem('token');\r\n            this.setAuth(false);\r\n            this.setUser({} as IUser);\r\n        } catch (e: any) {\r\n            this.setMessage(e.response?.data?.message);\r\n        } finally {\r\n            this.setMessage('');\r\n        }\r\n    }\r\n\r\n    async checkAuth() {\r\n        this.setLoading(true);\r\n        try {\r\n            const response = await axios.get<AuthResponse>(`${AUTH_URL}/refresh`, {withCredentials: true});\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            this.setAuth(true);\r\n            this.setUser(response.data.user);\r\n        } catch (e: any) {\r\n            this.setMessage(e.response?.data?.message);\r\n        } finally {\r\n            this.setLoading(false);\r\n            this.setMessage('');\r\n        }\r\n    }\r\n}","import React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Store from './store/store';\nimport IStore from './types/IStore';\nimport './styles/index.scss';\n\nconst store = new Store();\n\nexport const Context = createContext<IStore>({\n  store,\n});\n\nReactDOM.render(\n  <Context.Provider value={{store}}>\n    <App /> \n  </Context.Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}